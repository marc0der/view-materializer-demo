group 'org.example'
version '1.0-SNAPSHOT'

apply plugin: 'groovy'
apply plugin: 'scala'
apply plugin: 'idea'

repositories {
    jcenter()
}

dependencies {
    compile "org.scala-lang:scala-library:2.11.7"
    compile 'org.codehaus.groovy:groovy-all:2.4.4'
    compile 'org.slf4j:slf4j-simple:1.7.12'
    compile(scalaLib("com.softwaremill:reactive-kafka:0.7.0")) {
        exclude module: "slf4j-simple"
        exclude module: "slf4j-log4j12"
    }
    compile scalaLib("com.sksamuel.elastic4s:elastic4s-core:1.6.6")
    compile scalaLib("org.slf4s:slf4s-api:1.7.12")
    compile(scalaLib("org.scala-lang.modules:scala-pickling:0.10.1")) {
        exclude module: "scala-library"
        exclude module: "scala-compiler"
    }
    compile scalaLib("com.typesafe.scala-logging:scala-logging:3.1.0")
    testCompile ("org.spockframework:spock-core:1.0-groovy-2.4") {
        exclude module: "groovy-all"
    }
    testCompile 'com.wiredforcode:groovy-scala-extension-module:0.3'
    testCompile ("org.apache.kafka:kafka-clients:0.8.2.1") {
        exclude module: "slf4j-simple"
        exclude module: "slf4j-log4j12"
    }
}

idea {
    module {
        testSourceDirs += file("src/acceptance/groovy")
        testSourceDirs += file("src/acceptance/resources")
    }
}

configurations {
    acceptanceTestCompile.extendsFrom testCompile
    acceptanceTestRuntime.extendsFrom testRuntime
}

sourceSets {
    acceptanceTest {
        groovy.srcDir file('src/acceptance/groovy')
        resources.srcDir     file('src/acceptance/resources')
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.acceptanceTestCompile
        runtimeClasspath = output + compileClasspath + configurations.acceptanceTestRuntime
    }
}

task acceptanceTest(type: Test) {
    testClassesDir = sourceSets.acceptanceTest.output.classesDir
    classpath = sourceSets.acceptanceTest.runtimeClasspath
}

check.dependsOn acceptanceTest

def scalaLib(String dep) {
    def tokens = dep.tokenize(":")
    "${tokens[0]}:${tokens[1]}_2.11:${tokens[2]}"
}
